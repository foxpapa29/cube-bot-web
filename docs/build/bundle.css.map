{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Dashboard.svelte",
    "Login.svelte",
    "Solve.svelte",
    "Timer.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { fade } from \"svelte/transition\";\n  import { events } from \"./config\";\n\n  export let currentEvent;\n</script>\n\n<style>\n  .card {\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n    transition-duration: 0.5s;\n  }\n  .card:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n    transition-duration: 0.5s;\n  }\n</style>\n\n<div class=\"container\" in:fade={{ duration: 250 }}>\n  <div\n    class=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 text-center\">\n    {#each events as e}\n      <div class=\"col mt-4\">\n        <div class=\"card\" on:click={() => (currentEvent = e)}>\n          <img src=\"img/{e}.svg\" class=\"card-img-top\" alt={e} />\n          <div class=\"card-footer bg-transparent\">\n            <h4 class=\"\">{e}</h4>\n          </div>\n        </div>\n      </div>\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import { fly } from 'svelte/transition';\n</script>\n\n<style>\n  main {\n    position: relative;\n    top: 30%;\n  }\n</style>\n\n<main class=\"text-center\" in:fly={{ y: -150, duration: 3000 }}>\n  <h1 class=\"display-3\">CUBE COMPETITIONS</h1>\n  <p class=\"lead\">You must log in to discord to continue</p>\n</main>\n",
    "<script>\n  import { fade } from \"svelte/transition\";\n  import * as R from \"ramda\";\n  import dayjs from \"dayjs\";\n  import confetti from \"canvas-confetti\";\n\n  import Timer from \"./Timer.svelte\";\n  import TimeList from \"./TimeList.svelte\";\n  import { averageOfFiveCalculator, msToTime } from \"../tools/calculator\";\n\n  export let currentEvent;\n  export let times;\n\n  let scrambles = [];\n  let displayScrambles = localStorage.dscr === \"ðŸ‘€\";\n\n  const newTime = (t) =>\n    (times[currentTimesIndex].solves = [\n      ...times[currentTimesIndex].solves,\n      [t, 0],\n    ]);\n\n  $: fetch(`/api/scrambles/${currentEvent}/${dayjs().format(\"YYYY-MM-DD\")}`)\n    .then((res) => res.json())\n    .then((s) => (scrambles = s.scrambles));\n\n  $: currentTimesIndex = R.findIndex(R.propEq(\"event\")(currentEvent))(times);\n  $: currentTimesArray = times[currentTimesIndex].solves;\n  $: currentScramble =\n    scrambles[R.length(currentTimesArray)]?.scrambleString ?? \"\";\n  $: currentSVG = scrambles[R.length(currentTimesArray)]?.svg ?? \"\";\n\n  var count = 400;\n  var defaults = {\n    origin: { y: 0.7 },\n  };\n\n  function fire(particleRatio, opts) {\n    confetti(\n      Object.assign({}, defaults, opts, {\n        particleCount: Math.floor(count * particleRatio),\n      })\n    );\n  }\n\n  fire(0.25, {\n    spread: 26,\n    startVelocity: 55,\n  });\n  fire(0.2, {\n    spread: 60,\n  });\n  fire(0.35, {\n    spread: 100,\n    decay: 0.91,\n    scalar: 0.8,\n  });\n  fire(0.1, {\n    spread: 120,\n    startVelocity: 25,\n    decay: 0.92,\n    scalar: 1.2,\n  });\n  fire(0.1, {\n    spread: 120,\n    startVelocity: 45,\n  });\n</script>\n\n<style>\n  h1 {\n    min-height: 200px;\n  }\n\n  .timer {\n    min-height: 500px;\n  }\n</style>\n\n<div class=\"container-fluid\" in:fade={{ duration: 250 }}>\n  <div class=\"row\">\n    <div class=\"col-sm-8\">\n      <div class=\"row\">\n        <div class=\"col-12 text-center\">\n          {#await currentScramble}\n            <p>Waiting for scrambles</p>\n          {:then x}\n            <h1 class=\"display-5\">{currentScramble}</h1>\n          {/await}\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <div class=\"timer text-center\">\n            {#if R.equals(5, R.length(currentTimesArray))}\n              <h1 class=\"display-1\">Veuillez soumettre vos temps</h1>\n            {:else}\n              <Timer on:newTime={(e) => newTime(e.detail.time)} />\n            {/if}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-4\">\n      <TimeList\n        bind:times\n        bind:currentTimesArray\n        bind:currentTimesIndex\n        bind:displayScrambles />\n      {#if R.equals(5, R.length(currentTimesArray))}\n        <p>ao5: {msToTime(averageOfFiveCalculator(currentTimesArray))}</p>\n      {:else if displayScrambles}\n        <div class=\"row\">\n          <div class=\"col\" id=\"svg\">\n            {@html currentSVG}\n          </div>\n        </div>\n      {/if}\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import dayjs from \"dayjs\";\n  import { createEventDispatcher } from \"svelte\";\n\n  import { msToTime } from \"../tools/calculator\";\n  const dispatch = createEventDispatcher();\n  const updateTimesArray = (time) => dispatch(\"newTime\", { time });\n\n  let startTime;\n  let timeout;\n  let allowed = true;\n  let green = false;\n  let red = false;\n  let running = false;\n  let timerText = \"Ready\";\n  let finalTime;\n  let waiting = false;\n\n  const displayTime = () => (timerText = msToTime(dayjs().diff(startTime)));\n\n  const startTimer = () => {\n    running = true;\n    timeout = setInterval(displayTime, 10);\n    startTime = dayjs();\n    green = false;\n  };\n\n  const stopTimer = () => {\n    running = false;\n    waiting = true;\n    red = true;\n    clearTimeout(timeout);\n\n    finalTime = dayjs().diff(startTime);\n    timerText = msToTime(finalTime);\n    updateTimesArray(finalTime);\n  };\n\n  const timerSetReady = () => {\n    waiting = false;\n    timerText = \"0.00\";\n    green = true;\n  };\n\n  const timerAfterStop = () => {\n    red = false;\n  };\n\n  const down = (event) => {\n    if (!allowed) {\n      return;\n    }\n    if (running) {\n      stopTimer();\n    } else if (event.code === \"Space\") {\n      timerSetReady();\n    }\n    allowed = false;\n  };\n\n  const up = (event) => {\n    if (!running && !waiting && event.code === \"Space\") {\n      startTimer();\n    } else {\n      timerAfterStop();\n    }\n    allowed = true;\n  };\n</script>\n\n<style>\n  .red {\n    color: red;\n  }\n\n  .green {\n    color: green;\n  }\n</style>\n\n<svelte:window on:keydown={down} on:keyup={up} />\n\n<h1\n  class=\"display-1\"\n  class:green\n  class:red\n  on:touchstart={() => down({ code: 'Space' })}\n  on:touchend={() => up({ code: 'Space' })}>\n  {timerText}\n</h1>\n"
  ],
  "names": [],
  "mappings": "AAQE,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAC9D,mBAAmB,CAAE,IAAI,AAC3B,CAAC,AACD,mBAAK,MAAM,AAAC,CAAC,AACX,UAAU,CAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,CACxD,mBAAmB,CAAE,IAAI,AAC3B,CAAC;ACVD,IAAI,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,AACV,CAAC;AC8DD,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,KAAK,AACnB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC;ACLD,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,AACd,CAAC"
}